Using backend: paddle

grep: warning: GREP_OPTIONS is deprecated; please use an alias or script
Compiling model...
'compile' took 0.000679 s

Training model...

paddle start_up_program run...
train_inputs_buffer shape : (20, 1)
train_targets_buffer shape : (20, 1)

op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  tanh_p args ('X', 'Y')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  tanh_p args ('X', 'Y')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  tanh_p args ('X', 'Y')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  tanh_p args ('X', 'Y')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  tanh_p args ('X', 'Y')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  tanh_p args ('X', 'Y')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  sub_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  add_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  mul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
op.type :  matmul_p args ('X', 'Y', 'Z')
********8 f : [var tmp_3 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)] len f: 1
********8 loss_fn : [<function mean_squared_error at 0x7f2f6bb8c730>, <function mean_squared_error at 0x7f2f6bb8c730>]
********8 num_bcs : [2]
********8 bcs_start : [0, 2]
train program:  { // block 0
    persist trainable param linear_0.w_0 : LOD_TENSOR.shape(1, 50).dtype(float32).stop_gradient(False)
    persist trainable param linear_0.b_0 : LOD_TENSOR.shape(50,).dtype(float32).stop_gradient(False)
    persist trainable param linear_1.w_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    persist trainable param linear_1.b_0 : LOD_TENSOR.shape(50,).dtype(float32).stop_gradient(False)
    persist trainable param linear_2.w_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    persist trainable param linear_2.b_0 : LOD_TENSOR.shape(50,).dtype(float32).stop_gradient(False)
    persist trainable param linear_3.w_0 : LOD_TENSOR.shape(50, 1).dtype(float32).stop_gradient(False)
    persist trainable param linear_3.b_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var train_inputs : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var train_targets : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var linear_4.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var linear_4.tmp_1 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var tanh_0.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var linear_5.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var linear_5.tmp_1 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var tanh_1.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var linear_6.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var linear_6.tmp_1 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var tanh_2.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var linear_7.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var linear_7.tmp_1 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var broadcast_p_0.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var broadcast_p_1.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var broadcast_p_2.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var broadcast_p_3.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var fill_constant_p_1.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_0.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_0.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_2.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_2.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_1.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_3.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_4.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_2.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_4.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var transpose_p_0.tmp_0 : LOD_TENSOR.shape(1, 50).dtype(float32).stop_gradient(False)
    var matmul_p_8.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_6.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_1.tmp_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    var matmul_p_9.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_7.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_2.tmp_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    var matmul_p_10.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_8.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_3.tmp_0 : LOD_TENSOR.shape(50, 1).dtype(float32).stop_gradient(False)
    var matmul_p_11.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var fill_constant_p_6.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_9.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_3.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_7.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_11.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_4.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_8.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_13.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_5.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_9.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_10.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_11.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_12.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var transpose_p_4.tmp_0 : LOD_TENSOR.shape(1, 50).dtype(float32).stop_gradient(False)
    var matmul_p_18.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_26.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_27.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_5.tmp_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    var matmul_p_19.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_28.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_29.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_6.tmp_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    var matmul_p_20.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_30.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_13.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_9.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_31.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_32.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var add_p_9.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_14.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_10.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_33.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_34.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var add_p_10.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var fill_constant_p_15.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var sub_p_11.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_35.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_36.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var add_p_11.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_37.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_7.tmp_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    var matmul_p_21.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var add_p_12.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_38.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_8.tmp_0 : LOD_TENSOR.shape(50, 50).dtype(float32).stop_gradient(False)
    var matmul_p_22.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var add_p_13.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var mul_p_39.tmp_0 : LOD_TENSOR.shape(20, 50).dtype(float32).stop_gradient(False)
    var transpose_p_9.tmp_0 : LOD_TENSOR.shape(50, 1).dtype(float32).stop_gradient(False)
    var matmul_p_23.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var tmp_1 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var sin_0.tmp_0 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var tmp_2 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var tmp_3 : LOD_TENSOR.shape(20, 1).dtype(float32).stop_gradient(False)
    var tmp_3_slice_0 : LOD_TENSOR.shape(18, 1).dtype(float32).stop_gradient(False)
    var fill_constant_1.tmp_0 : LOD_TENSOR.shape(18, 1).dtype(float32).stop_gradient(True)
    var tmp_4 : LOD_TENSOR.shape(18, 1).dtype(float32).stop_gradient(False)
    var fill_constant_3.tmp_0 : LOD_TENSOR.shape(18, 1).dtype(float32).stop_gradient(True)
    var elementwise_pow_0.tmp_0 : LOD_TENSOR.shape(18, 1).dtype(float32).stop_gradient(False)
    var sum_0.tmp_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var assign_0.tmp_0 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(True)
    var linear_7.tmp_1_slice_0 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(False)
    var tmp_5 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(False)
    var fill_constant_5.tmp_0 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(True)
    var tmp_6 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(False)
    var fill_constant_7.tmp_0 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(True)
    var elementwise_pow_2.tmp_0 : LOD_TENSOR.shape(2, 1).dtype(float32).stop_gradient(False)
    var sum_1.tmp_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var concat_0.tmp_0 : LOD_TENSOR.shape(2,).dtype(float32).stop_gradient(False)
    var sum_2.tmp_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)

    {Out=['linear_0.w_0']} = uniform_random(inputs={ShapeTensor=[], ShapeTensorList=[]}, diag_num = 0, diag_step = 0, diag_val = 1.0, dtype = 5, max = 0.34299716353416443, min = -0.34299716353416443, op_device = , op_namescope = /, op_role = 0, op_role_var = [], seed = 0, shape = [1, 50], with_quant_attr = False)
    {Out=['linear_0.b_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [50], str_value = 0.0, use_mkldnn = False, value = 0.0, with_quant_attr = False)
    {Out=['linear_1.w_0']} = uniform_random(inputs={ShapeTensor=[], ShapeTensorList=[]}, diag_num = 0, diag_step = 0, diag_val = 1.0, dtype = 5, max = 0.24494896829128265, min = -0.24494896829128265, op_device = , op_namescope = /, op_role = 0, op_role_var = [], seed = 0, shape = [50, 50], with_quant_attr = False)
    {Out=['linear_1.b_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [50], str_value = 0.0, use_mkldnn = False, value = 0.0, with_quant_attr = False)
    {Out=['linear_2.w_0']} = uniform_random(inputs={ShapeTensor=[], ShapeTensorList=[]}, diag_num = 0, diag_step = 0, diag_val = 1.0, dtype = 5, max = 0.24494896829128265, min = -0.24494896829128265, op_device = , op_namescope = /, op_role = 0, op_role_var = [], seed = 0, shape = [50, 50], with_quant_attr = False)
    {Out=['linear_2.b_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [50], str_value = 0.0, use_mkldnn = False, value = 0.0, with_quant_attr = False)
    {Out=['linear_3.w_0']} = uniform_random(inputs={ShapeTensor=[], ShapeTensorList=[]}, diag_num = 0, diag_step = 0, diag_val = 1.0, dtype = 5, max = 0.34299716353416443, min = -0.34299716353416443, op_device = , op_namescope = /, op_role = 0, op_role_var = [], seed = 0, shape = [50, 1], with_quant_attr = False)
    {Out=['linear_3.b_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [1], str_value = 0.0, use_mkldnn = False, value = 0.0, with_quant_attr = False)
    {Z=['linear_4.tmp_0']} = matmul_p(inputs={X=['train_inputs'], Y=['linear_0.w_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['broadcast_p_0.tmp_0']} = broadcast_p(inputs={X=['linear_0.b_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], with_quant_attr = False)
    {Z=['linear_4.tmp_1']} = add_p(inputs={X=['linear_4.tmp_0'], Y=['broadcast_p_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['tanh_0.tmp_0']} = tanh_p(inputs={X=['linear_4.tmp_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['linear_5.tmp_0']} = matmul_p(inputs={X=['tanh_0.tmp_0'], Y=['linear_1.w_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['broadcast_p_1.tmp_0']} = broadcast_p(inputs={X=['linear_1.b_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], with_quant_attr = False)
    {Z=['linear_5.tmp_1']} = add_p(inputs={X=['linear_5.tmp_0'], Y=['broadcast_p_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['tanh_1.tmp_0']} = tanh_p(inputs={X=['linear_5.tmp_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['linear_6.tmp_0']} = matmul_p(inputs={X=['tanh_1.tmp_0'], Y=['linear_2.w_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['broadcast_p_2.tmp_0']} = broadcast_p(inputs={X=['linear_2.b_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], with_quant_attr = False)
    {Z=['linear_6.tmp_1']} = add_p(inputs={X=['linear_6.tmp_0'], Y=['broadcast_p_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['tanh_2.tmp_0']} = tanh_p(inputs={X=['linear_6.tmp_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['linear_7.tmp_0']} = matmul_p(inputs={X=['tanh_2.tmp_0'], Y=['linear_3.w_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['broadcast_p_3.tmp_0']} = broadcast_p(inputs={X=['linear_3.b_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 1], with_quant_attr = False)
    {Z=['linear_7.tmp_1']} = add_p(inputs={X=['linear_7.tmp_0'], Y=['broadcast_p_3.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_1.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 1.0, with_quant_attr = False)
    {Z=['mul_p_0.tmp_0']} = mul_p(inputs={X=['tanh_0.tmp_0'], Y=['tanh_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['sub_p_0.tmp_0']} = sub_p(inputs={X=['fill_constant_p_1.tmp_0'], Y=['mul_p_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_2.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 1.0, with_quant_attr = False)
    {Z=['mul_p_2.tmp_0']} = mul_p(inputs={X=['tanh_1.tmp_0'], Y=['tanh_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['sub_p_1.tmp_0']} = sub_p(inputs={X=['fill_constant_p_2.tmp_0'], Y=['mul_p_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_3.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 1.0, with_quant_attr = False)
    {Z=['mul_p_4.tmp_0']} = mul_p(inputs={X=['tanh_2.tmp_0'], Y=['tanh_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['sub_p_2.tmp_0']} = sub_p(inputs={X=['fill_constant_p_3.tmp_0'], Y=['mul_p_4.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_4.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 1], value = 1.0, with_quant_attr = False)
    {Y=['transpose_p_0.tmp_0']} = transpose_p(inputs={X=['linear_3.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_8.tmp_0']} = matmul_p(inputs={X=['fill_constant_p_4.tmp_0'], Y=['transpose_p_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_6.tmp_0']} = mul_p(inputs={X=['matmul_p_8.tmp_0'], Y=['sub_p_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_1.tmp_0']} = transpose_p(inputs={X=['linear_2.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_9.tmp_0']} = matmul_p(inputs={X=['mul_p_6.tmp_0'], Y=['transpose_p_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_7.tmp_0']} = mul_p(inputs={X=['matmul_p_9.tmp_0'], Y=['sub_p_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_2.tmp_0']} = transpose_p(inputs={X=['linear_1.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_10.tmp_0']} = matmul_p(inputs={X=['mul_p_7.tmp_0'], Y=['transpose_p_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_8.tmp_0']} = mul_p(inputs={X=['matmul_p_10.tmp_0'], Y=['sub_p_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_3.tmp_0']} = transpose_p(inputs={X=['linear_0.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_11.tmp_0']} = matmul_p(inputs={X=['mul_p_8.tmp_0'], Y=['transpose_p_3.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_6.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 1.0, with_quant_attr = False)
    {Z=['mul_p_9.tmp_0']} = mul_p(inputs={X=['tanh_0.tmp_0'], Y=['tanh_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['sub_p_3.tmp_0']} = sub_p(inputs={X=['fill_constant_p_6.tmp_0'], Y=['mul_p_9.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_7.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 1.0, with_quant_attr = False)
    {Z=['mul_p_11.tmp_0']} = mul_p(inputs={X=['tanh_1.tmp_0'], Y=['tanh_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['sub_p_4.tmp_0']} = sub_p(inputs={X=['fill_constant_p_7.tmp_0'], Y=['mul_p_11.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_8.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 1.0, with_quant_attr = False)
    {Z=['mul_p_13.tmp_0']} = mul_p(inputs={X=['tanh_2.tmp_0'], Y=['tanh_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['sub_p_5.tmp_0']} = sub_p(inputs={X=['fill_constant_p_8.tmp_0'], Y=['mul_p_13.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_9.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 0.0, with_quant_attr = False)
    {Y=['fill_constant_p_10.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 0.0, with_quant_attr = False)
    {Y=['fill_constant_p_11.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 0.0, with_quant_attr = False)
    {Y=['fill_constant_p_12.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 1], value = 1.0, with_quant_attr = False)
    {Y=['transpose_p_4.tmp_0']} = transpose_p(inputs={X=['transpose_p_3.tmp_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_18.tmp_0']} = matmul_p(inputs={X=['fill_constant_p_12.tmp_0'], Y=['transpose_p_4.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_26.tmp_0']} = mul_p(inputs={X=['matmul_p_10.tmp_0'], Y=['matmul_p_18.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_27.tmp_0']} = mul_p(inputs={X=['matmul_p_18.tmp_0'], Y=['sub_p_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_5.tmp_0']} = transpose_p(inputs={X=['transpose_p_2.tmp_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_19.tmp_0']} = matmul_p(inputs={X=['mul_p_27.tmp_0'], Y=['transpose_p_5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_28.tmp_0']} = mul_p(inputs={X=['matmul_p_9.tmp_0'], Y=['matmul_p_19.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_29.tmp_0']} = mul_p(inputs={X=['matmul_p_19.tmp_0'], Y=['sub_p_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_6.tmp_0']} = transpose_p(inputs={X=['transpose_p_1.tmp_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_20.tmp_0']} = matmul_p(inputs={X=['mul_p_29.tmp_0'], Y=['transpose_p_6.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_30.tmp_0']} = mul_p(inputs={X=['matmul_p_8.tmp_0'], Y=['matmul_p_20.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_13.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 0.0, with_quant_attr = False)
    {Z=['sub_p_9.tmp_0']} = sub_p(inputs={X=['fill_constant_p_13.tmp_0'], Y=['mul_p_30.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_31.tmp_0']} = mul_p(inputs={X=['tanh_2.tmp_0'], Y=['sub_p_9.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_32.tmp_0']} = mul_p(inputs={X=['sub_p_9.tmp_0'], Y=['tanh_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['add_p_9.tmp_0']} = add_p(inputs={X=['mul_p_31.tmp_0'], Y=['mul_p_32.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_14.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 0.0, with_quant_attr = False)
    {Z=['sub_p_10.tmp_0']} = sub_p(inputs={X=['fill_constant_p_14.tmp_0'], Y=['mul_p_28.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_33.tmp_0']} = mul_p(inputs={X=['tanh_1.tmp_0'], Y=['sub_p_10.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_34.tmp_0']} = mul_p(inputs={X=['sub_p_10.tmp_0'], Y=['tanh_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['add_p_10.tmp_0']} = add_p(inputs={X=['mul_p_33.tmp_0'], Y=['mul_p_34.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['fill_constant_p_15.tmp_0']} = fill_constant_p(inputs={}, dtype = 5, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [20, 50], value = 0.0, with_quant_attr = False)
    {Z=['sub_p_11.tmp_0']} = sub_p(inputs={X=['fill_constant_p_15.tmp_0'], Y=['mul_p_26.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_35.tmp_0']} = mul_p(inputs={X=['tanh_0.tmp_0'], Y=['sub_p_11.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_36.tmp_0']} = mul_p(inputs={X=['sub_p_11.tmp_0'], Y=['tanh_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['add_p_11.tmp_0']} = add_p(inputs={X=['mul_p_35.tmp_0'], Y=['mul_p_36.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_37.tmp_0']} = mul_p(inputs={X=['add_p_9.tmp_0'], Y=['sub_p_5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_7.tmp_0']} = transpose_p(inputs={X=['linear_2.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_21.tmp_0']} = matmul_p(inputs={X=['mul_p_37.tmp_0'], Y=['transpose_p_7.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['add_p_12.tmp_0']} = add_p(inputs={X=['add_p_10.tmp_0'], Y=['matmul_p_21.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_38.tmp_0']} = mul_p(inputs={X=['add_p_12.tmp_0'], Y=['sub_p_4.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_8.tmp_0']} = transpose_p(inputs={X=['linear_1.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_22.tmp_0']} = matmul_p(inputs={X=['mul_p_38.tmp_0'], Y=['transpose_p_8.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['add_p_13.tmp_0']} = add_p(inputs={X=['add_p_11.tmp_0'], Y=['matmul_p_22.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['mul_p_39.tmp_0']} = mul_p(inputs={X=['add_p_13.tmp_0'], Y=['sub_p_3.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Y=['transpose_p_9.tmp_0']} = transpose_p(inputs={X=['linear_0.w_0']}, axis = [1, 0], op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Z=['matmul_p_23.tmp_0']} = matmul_p(inputs={X=['mul_p_39.tmp_0'], Y=['transpose_p_9.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Out=['tmp_0']} = scale(inputs={ScaleTensor=[], X=['matmul_p_23.tmp_0']}, bias = 0.0, bias_after_scale = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], scale = -1.0, use_mkldnn = False, with_quant_attr = False)
    {Out=['tmp_1']} = scale(inputs={ScaleTensor=[], X=['train_inputs']}, bias = 0.0, bias_after_scale = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], scale = 3.1415927410125732, use_mkldnn = False, with_quant_attr = False)
    {Out=['sin_0.tmp_0']} = sin(inputs={X=['tmp_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['tmp_2']} = scale(inputs={ScaleTensor=[], X=['sin_0.tmp_0']}, bias = 0.0, bias_after_scale = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], scale = 9.869604110717773, use_mkldnn = False, with_quant_attr = False)
    {Out=['tmp_3']} = elementwise_sub(inputs={X=['tmp_0'], Y=['tmp_2']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['tmp_3_slice_0']} = slice(inputs={EndsTensor=[], EndsTensorList=[], Input=['tmp_3'], StartsTensor=[], StartsTensorList=[]}, axes = [0], decrease_axis = [], ends = [20], infer_flags = [1], mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], starts = [2], use_mkldnn = False, with_quant_attr = False)
    {Out=['fill_constant_1.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [18, 1], str_value = 0.0, use_mkldnn = False, value = 0.0, with_quant_attr = False)
    {Out=['tmp_4']} = elementwise_sub(inputs={X=['fill_constant_1.tmp_0'], Y=['tmp_3_slice_0']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['fill_constant_3.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [18, 1], str_value = 2.0, use_mkldnn = False, value = 2.0, with_quant_attr = False)
    {Out=['elementwise_pow_0.tmp_0']} = elementwise_pow(inputs={X=['tmp_4'], Y=['fill_constant_3.tmp_0']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['sum_0.tmp_0']} = reduce_sum(inputs={X=['elementwise_pow_0.tmp_0']}, dim = [0], in_dtype = -1, keep_dim = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], out_dtype = -1, reduce_all = True, use_mkldnn = False, with_quant_attr = False)
    {Out=['assign_0.tmp_0']} = assign_value(inputs={}, bool_values = [], dtype = 5, fp32_values = [8.742277657347586e-08, -8.742277657347586e-08], int32_values = [], int64_values = [], op_device = gpu:0, op_namescope = /, op_role = 0, op_role_var = [], shape = [2, 1], with_quant_attr = False)
    {Out=['linear_7.tmp_1_slice_0']} = slice(inputs={EndsTensor=[], EndsTensorList=[], Input=['linear_7.tmp_1'], StartsTensor=[], StartsTensorList=[]}, axes = [0, 1], decrease_axis = [], ends = [2, 1], infer_flags = [1, 1], mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], starts = [0, 0], use_mkldnn = False, with_quant_attr = False)
    {Out=['tmp_5']} = elementwise_sub(inputs={X=['linear_7.tmp_1_slice_0'], Y=['assign_0.tmp_0']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['fill_constant_5.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2, 1], str_value = 0.0, use_mkldnn = False, value = 0.0, with_quant_attr = False)
    {Out=['tmp_6']} = elementwise_sub(inputs={X=['fill_constant_5.tmp_0'], Y=['tmp_5']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['fill_constant_7.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[], ValueTensor=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2, 1], str_value = 2.0, use_mkldnn = False, value = 2.0, with_quant_attr = False)
    {Out=['elementwise_pow_2.tmp_0']} = elementwise_pow(inputs={X=['tmp_6'], Y=['fill_constant_7.tmp_0']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['sum_1.tmp_0']} = reduce_sum(inputs={X=['elementwise_pow_2.tmp_0']}, dim = [0], in_dtype = -1, keep_dim = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], out_dtype = -1, reduce_all = True, use_mkldnn = False, with_quant_attr = False)
    {Out=['concat_0.tmp_0']} = concat(inputs={AxisTensor=[], X=['sum_0.tmp_0', 'sum_1.tmp_0']}, axis = 0, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Out=['sum_2.tmp_0']} = reduce_sum(inputs={X=['concat_0.tmp_0']}, dim = [0], in_dtype = -1, keep_dim = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], out_dtype = -1, reduce_all = True, use_mkldnn = False, with_quant_attr = False)
}
/usr/local/lib/python3.7/site-packages/pkg_resources/_vendor/pyparsing.py:943: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
  collections.MutableMapping.register(ParseResults)
/usr/local/lib/python3.7/site-packages/pkg_resources/_vendor/pyparsing.py:3226: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
  elif isinstance( exprs, collections.Iterable ):
/usr/local/lib/python3.7/site-packages/setuptools/depends.py:2: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

test_inputs_buffer shape : (102, 1)
test_inputs_buffer shape : (102, 1)
Traceback (most recent call last):
  File "./deepxde/examples/pinn_forward/Poisson_Dirichlet_1d.py", line 44, in <module>
    losshistory, train_state = model.train(iterations=1)
  File "/home/wangruting/science/deepxde/deepxde/utils/internal.py", line 22, in wrapper
    result = f(*args, **kwargs)
  File "/home/wangruting/science/deepxde/deepxde/model.py", line 840, in train
    self.data.losses_test)
  File "/home/wangruting/science/deepxde/deepxde/model.py", line 622, in newAD_static_start_up
    self.test_outputs = self.net(test_inputs_buffer)
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/dygraph/layers.py", line 950, in __call__
    return self._dygraph_call_func(*inputs, **kwargs)
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/dygraph/layers.py", line 935, in _dygraph_call_func
    outputs = self.forward(*inputs, **kwargs)
  File "/home/wangruting/science/deepxde/deepxde/nn/paddle/fnn.py", line 28, in forward
    x = self.activation(linear(x))
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/dygraph/layers.py", line 950, in __call__
    return self._dygraph_call_func(*inputs, **kwargs)
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/dygraph/layers.py", line 935, in _dygraph_call_func
    outputs = self.forward(*inputs, **kwargs)
  File "/home/wangruting/science/Paddle/build/python/paddle/nn/layer/common.py", line 172, in forward
    name=self.name)
  File "/home/wangruting/science/Paddle/build/python/paddle/nn/functional/common.py", line 1761, in linear
    attrs=attrs)
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/layer_helper.py", line 45, in append_op
    return self.main_program.current_block().append_op(*args, **kwargs)
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/framework.py", line 3828, in append_op
    attrs=kwargs.get("attrs", None))
  File "/home/wangruting/science/Paddle/build/python/paddle/fluid/framework.py", line 2874, in __init__
    self.desc.infer_shape(self.block.desc)
RuntimeError: (NotFound) No Input(Y) found for matmul_v2 operator.
  [Hint: Expected ctx->HasInput("Y") == true, but received ctx->HasInput("Y"):0 != true:1.] (at /home/wangruting/science/Paddle/paddle/fluid/operators/matmul_v2_op.cc:52)
  [operator < matmul_v2 > error]
